/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/staging/cloudOne/cloudOne.glb  --types --keepnames --shadows --transform --simplify
*/

import type { Mesh, MeshStandardMaterial } from 'three';
import { useControls } from 'leva';
import { useGLTF, Instances } from '@react-three/drei';
import type { GLTF } from 'three-stdlib';
import { generateInstancedModelData } from '~/utils/canvas';

import InstancedCloud from './InstancedCloud';

type GLTFResult = GLTF & {
  nodes: {
    cloudZero: Mesh;
    cloudOne: Mesh;
    cloudTwo: Mesh;
    CloudThree: Mesh;
    cloudFour: Mesh;
  };
  materials: {
    aiStandardSurface1SG: MeshStandardMaterial;
  };
};

const FILE_URL = 'https://dqeczc7c9n9n1.cloudfront.net/models/clouds-1681977951/clouds.glb';
const CLOUD_TYPES = 5;

export default function Clouds(props: JSX.IntrinsicElements['group']) {
  const range = useControls({ clouds: { value: 50, min: 10, max: 100, step: 10 } });
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const cloudOneInstancedData = generateInstancedModelData(range.clouds / CLOUD_TYPES, [10, 1.75, 0.1], 0.01);
  const cloudTwoInstancedData = generateInstancedModelData(range.clouds / CLOUD_TYPES, [10, 1.75, 0.1], 0.01);
  const cloudThreeInstancedData = generateInstancedModelData(range.clouds / CLOUD_TYPES, [10, 1.75, 0.1], 0.01);
  const cloudFourInstancedData = generateInstancedModelData(range.clouds / CLOUD_TYPES, [10, 1.75, 0.1], 0.01);
  const cloudZeroInstancedData = generateInstancedModelData(range.clouds / CLOUD_TYPES, [10, 1.75, 0.1], 0.01);

  return (
    <group {...props} dispose={null}>
      <Instances
        range={range.clouds / CLOUD_TYPES}
        material={materials.aiStandardSurface1SG}
        geometry={nodes.cloudOne.geometry}
      >
        <group>
          {cloudOneInstancedData.map((props, i) => (
            <InstancedCloud key={i} {...props} />
          ))}
        </group>
      </Instances>
      <Instances
        range={range.clouds / CLOUD_TYPES}
        material={materials.aiStandardSurface1SG}
        geometry={nodes.cloudTwo.geometry}
      >
        <group>
          {cloudTwoInstancedData.map((props, i) => (
            <InstancedCloud key={i} {...props} />
          ))}
        </group>
      </Instances>
      <Instances
        range={range.clouds / CLOUD_TYPES}
        material={materials.aiStandardSurface1SG}
        geometry={nodes.CloudThree.geometry}
      >
        <group>
          {cloudThreeInstancedData.map((props, i) => (
            <InstancedCloud key={i} {...props} />
          ))}
        </group>
      </Instances>
      <Instances
        range={range.clouds / CLOUD_TYPES}
        material={materials.aiStandardSurface1SG}
        geometry={nodes.cloudFour.geometry}
      >
        <group>
          {cloudFourInstancedData.map((props, i) => (
            <InstancedCloud key={i} {...props} />
          ))}
        </group>
      </Instances>
      <Instances
        range={range.clouds / CLOUD_TYPES}
        material={materials.aiStandardSurface1SG}
        geometry={nodes.cloudZero.geometry}
      >
        <group>
          {cloudZeroInstancedData.map((props, i) => (
            <InstancedCloud key={i} {...props} />
          ))}
        </group>
      </Instances>
    </group>
  );
}

useGLTF.preload(FILE_URL);
